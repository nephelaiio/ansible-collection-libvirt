---
- name: Set host facts
  ansible.builtin.import_playbook: nephelaiio.libvirt.defaults

- name: Verify KVM guests
  hosts: all
  gather_facts: false
  tasks:
    - name: Verify KVM guest attributes
      block:
        - name: Filter platform facts
          ansible.builtin.set_fact:
            _guest_data: "{{ _platform_data }}"
            _guest_index: "{{ _platform_index }}"
          vars:
          _platform_names: "{{ libvirt_platforms | map(attribute='name') | list }}"
          _platform_index: "{{ lookup('ansible.utils.index_of', _platform_names, 'eq', inventory_hostname) }}"
          _platform_data: "{{ libvirt_platforms[_platform_index] }) }}"

        - name: Set platform facts
          ansible.builtin.set_fact:
            _guest_image: "{{ _guest_data.image | default('') }}"
            _guest_name: "{{ _guest_data.name }}"
            _guest_cpu: "{{ _guest_data.cpu | default(2) }}"
            _guest_mem: "{{ _guest_data.mem | default(2) }}"
            _guest_index: "{{ _guest_index }}"
            _guest_disk: "{{ _libvirt_path }}/{{ _guest_data.name }}.img"
            _guest_nbddisk: "{{ _libvirt_guest_dir }}/{{ _guest_data.name }}.raw"
            _guest_nbddev: "/dev/nbd{{ _guest_data.index }}"
            _guest_nbddir: "{{ _libvirt_guest_dir }}/{{ _guest_data.name }}"

        - name: Gather facts
          ansible.builtin.setup:
          ignore_unreachable: true
          register: _setup

        - name: Check guest status
          ansible.builtin.assert:
            that: _unreachable not in _setup
            fail_msg: "Host is unreachable"
          vars:
            _unreachable: unreachable

        - name: Check guest attributes
          ansible.builtin.assert:
            that:
              - ansible_processor_nproc == (_guest_cpu | int)
              - (_memtotal_gb | int) == (_guest_mem | int)
            fail_msg: |
              Expected {{ _guest_cpu }} processors, got {{ ansible_processor_nproc }}
              Expected {{ _guest_mem }}GB memory, got {{ _memtotal_gb }}GB
          vars:
            _memtotal_gb: "{{ (ansible_memtotal_mb / 1024) | round | int }}"

      always:
        - name: Collect install logs
          delegate_to: localhost
          become: true
          block:
            - name: Create logdir
              ansible.builtin.file:
                path: "{{ _libvirt_logdir }}"
                state: directory
                owner: "{{ lookup('ansible.builtin.env', 'USER') }}"
                mode: "u=rwx,g=rx,o="
              run_once: true

            - name: Load NBD module
              community.general.modprobe:
                name: nbd
                state: present

            - name: Create NBD mount directory
              ansible.builtin.file:
                path: "{{ _guest_nbddir }}"
                state: directory
                owner: "{{ lookup('ansible.builtin.env', 'USER') }}"
                mode: "u=rwx,go=rx"

            - name: Disconnect disk image from NBD device
              ansible.builtin.command: "qemu-nbd -d {{ _guest_nbddev }}"

            - name: Create libvirt tempdir
              ansible.builtin.tempfile:
                state: directory
                prefix: libvirt
              register: _libvirt_tmpdir
              changed_when: false

            - name: Copy disk image to temporary file
              vars:
                _temp_disk: "{{ _libvirt_tmpdir.path }}/{{ _guest_disk | basename }}"
              block:
                - name: Stop KVM guest
                  ansible.builtin.shell: "virsh -c qemu:///system suspend {{ _guest_name }} > /dev/null"

                - name: Copy NBD disk to temp image
                  ansible.builtin.copy:
                    src: "{{ _guest_disk }}"
                    dest: "{{ _temp_disk }}"
                    mode: "o=rw,g=,o="
                    remote_src: true

                - name: Convert NBD disk image to raw format
                  ansible.builtin.command: "qemu-img convert -O raw {{ _temp_disk }} {{ _guest_nbddisk }}"

              always:
                - name: Destroy libvirt tempdir
                  ansible.builtin.file:
                    dest: "{{ _libvirt_tmpdir.path }}"
                    state: absent
                  changed_when: false

                - name: Resume KVM guest
                  ansible.builtin.command: "virsh -c qemu:///system resume {{ _guest_name }}"
                  ignore_errors: true

            - name: Connect disk image to NBD device
              ansible.builtin.command: "qemu-nbd --format raw --connect {{ _guest_nbddev }} {{ _guest_nbddisk }}"

            - name: Query NBD disk info
              ansible.builtin.command: "sfdisk --json {{ _guest_nbddev }}"
              register: _guest_fdisk

            - name: Set debug facts
              ansible.builtin.set_fact:
                _nbd_partitions: "{{ _partitions }}"
                _nbd_partition: "{{ _partitions | sort(attribute='size') | last }}"
              vars:
                _data: "{{ _guest_fdisk.stdout | from_json }}"
                _partitions: "{{ _data.partitiontable.partitions }}"

            - name: Debug NBD disk info
              ansible.builtin.debug:
                var: _nbd_partitions

            - name: Mount guest NBD image file
              block:
                - name: Mount guest NBD image file (ext4)
                  ansible.posix.mount:
                    path: "{{ _guest_nbddir }}"
                    src: "{{ _nbd_partition.node }}"
                    fstype: ext4
                    state: ephemeral

              rescue:
                - name: Mount guest NBD image file (xfs)
                  block:
                    - name: Mount guest NBD image file (xfs)
                      ansible.posix.mount:
                        path: "{{ _guest_nbddir }}"
                        src: "{{ _nbd_partition.node }}"
                        fstype: xfs
                        state: ephemeral

                  rescue:
                    - name: Stop for host with unsupported partition fs
                      ansible.builtin.meta: end_host

            - name: Debug NBD mount location
              ansible.builtin.debug:
                msg: "Mounted NBD partition at {{ _guest_nbddir }}"

            - name: Copy cloud-init log
              ansible.builtin.copy:
                src: "{{ log_src }}"
                dest: "{{ log_dest }}"
                remote_src: true
                mode: "uog=rw"
              vars:
                log_src: "{{ _guest_nbddir }}/{{ item }}"
                log_dest: "{{ _libvirt_logdir }}/{{ _guest_name }}.{{ item | basename }}"
              loop:
                - "var/lib/cloud/data/status.json"
                - "var/log/cloud-init.log"
                - "var/log/cloud-init-output.log"
                - "var/lib/cloud/instances/{{ _guest_name }}/cloud-config.txt"
                - "var/lib/cloud/instances/{{ _guest_name }}/user-data.txt"
              ignore_errors: true

            - name: Debug cloud-init log location
              ansible.builtin.debug:
                msg: "Installation logs for {{ _guest_name }} available at {{ _libvirt_logdir }}"

            - name: Unmount guest NBD image file
              ansible.posix.mount:
                path: "{{ _guest_nbddir }}"
                state: unmounted

            - name: Disconnect disk image from NBD device
              ansible.builtin.command: "qemu-nbd -d {{ _guest_nbddev }}"
