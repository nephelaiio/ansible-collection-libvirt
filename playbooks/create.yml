---
- name: Set host facts
  ansible.builtin.import_playbook: nephelaiio.libvirt.facts

- name: Prepare guest nodes
  ansible.builtin.import_playbook: nephelaiio.libvirt.prepare

- name: Configure guests
  hosts: localhost
  become: true
  vars:
    ansible_connection: local
  tasks:
    - name: Debug vardefs
      ansible.builtin.debug:
        msg: "{{ _varnames | zip(_varvalues) | map('join', '=') | reject('match', '^_libvirt_network_.*$') }}"
      vars:
        _varnames: "{{ lookup('ansible.builtin.varnames', '^_libvirt_.*$', wantlist=True) }}"
        _varvalues: "{{ lookup('ansible.builtin.vars', *_varnames) }}"

    - name: Create libvirt path
      ansible.builtin.file:
        path: "{{ _libvirt_path }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Create libvirt tempdir
      ansible.builtin.tempfile:
        state: directory
        prefix: libvirt
      register: _libvirt_tmpdir
      changed_when: false

    - name: Manage libvirt network
      block:
        - name: Query libvirt pools
          ansible.builtin.command: "virsh pool-list --name"
          register: _pools
          changed_when: false

        - name: Debug libvirt pools
          ansible.builtin.debug:
            var: _pools.stdout_lines

        - name: Debug target pool
          ansible.builtin.debug:
            var: _libvirt_pool

        - name: Set pool facts
          ansible.builtin.set_fact:
            _libvirt_pool_list: "{{ _pools.stdout_lines | map('trim') | list }}"

        - name: Create libvirt pool
          when: _libvirt_pool not in _libvirt_pool_list
          block:
            - name: Create libvirt pool template
              ansible.builtin.template:
                src: "pool.j2.xml"
                dest: "{{ _libvirt_tmpdir.path }}/pool.j2.xml"
                mode: "u=rw,g=r,o="
              vars:
                _pool_name: "{{ _libvirt_pool }}"
                _pool_path: "{{ _libvirt_path }}"

            - name: Define libvirt pool
              ansible.builtin.command: "virsh pool-define {{ _libvirt_tmpdir.path }}/pool.j2.xml --validate"
              changed_when: _libvirt_pool not in _pools.stdout_lines

            - name: Start libvirt pool
              ansible.builtin.command: "virsh pool-start {{ _libvirt_pool }}"
              ignore_errors: true
              changed_when: _libvirt_pool not in _pools.stdout_lines

        - name: Query libvirt networks
          ansible.builtin.command: "virsh net-list --name"
          register: _net_query
          changed_when: false

        - name: Set libvirt network facts
          ansible.builtin.set_fact:
            _libvirt_network_create: "{{ not _libvirt_network_default and not _libvirt_network_exists }}"
          vars:
            _libvirt_network_list: "{{ _net_query.stdout_lines | map('trim') | list }}"
            _libvirt_network_exists: "{{ _libvirt_network in _libvirt_network_list }}"
            _libvirt_network_default: "{{ _libvirt_network == 'default' }}"

        - name: Create libvirt network
          when: _libvirt_network_create | bool
          block:
            - name: Create libvirt network template
              ansible.builtin.template:
                src: "network.j2.xml"
                dest: "{{ _libvirt_tmpdir.path }}/network.j2.xml"
                mode: "u=rw,g=r,o="
              vars:
                _net_name: "{{ _libvirt_network }}"
                _net_address: "{{ _libvirt_address | ansible.utils.ipaddr('address') }}"
                _net_mask: "{{ _libvirt_address | ansible.utils.ipaddr('netmask') }}"

            - name: Add libvirt network
              ansible.builtin.command: "virsh net-define {{ _libvirt_tmpdir.path }}/network.j2.xml --validate"
              changed_when: _libvirt_network_create | bool

            - name: Start libvirt network
              ansible.builtin.command: "virsh net-start {{ _libvirt_network }}"
              ignore_errors: true
              changed_when: _libvirt_network_create | bool

            - name: Set libvirt network autostart
              ansible.builtin.command: "virsh net-autostart {{ _libvirt_network }}"
              changed_when: _libvirt_network_create | bool

      always:
        - name: Destroy libvirt tempdir
          ansible.builtin.file:
            dest: "{{ _libvirt_tmpdir.path }}"
            state: absent
          changed_when: false

    - name: List cached images
      ansible.builtin.find:
        paths: "{{ _libvirt_path }}"
        recurse: false
      register: _cache_query

    - name: Set image facts
      ansible.builtin.set_fact:
        platform_image_cached: "{{ _cache_query.files | map(attribute='path') }}"
        platform_image_urls: "{{ _platform_image_defined | map(attribute='image') | unique }}"
      vars:
        _platform_image_defined: "{{ _libvirt_platforms | selectattr('image', 'defined') }}"

    - name: Debug platform urls
      ansible.builtin.debug:
        var: platform_image_urls

    - name: Set platform image facts
      ansible.builtin.set_fact:
        platform_image_uncached: "{{ _platform_image_uncached }}"
      vars:
        _to_dict: nephelaiio.plugins.to_dict
        _platform_image_basenames: "{{ platform_image_urls | map('urlsplit', 'path') | map('basename') }}"
        _platform_image_paths: "{{ [_libvirt_path] | product(_platform_image_basenames) | map('join', '/') }}"
        _platform_image_tuples: "{{ (platform_image_urls | map(_to_dict, 'url')) | zip(_platform_image_paths | map(_to_dict, 'path')) }}"
        _platform_image_data: "{{ _platform_image_tuples | map('combine') }}"
        _platform_image_uncached: "{{ _platform_image_data | rejectattr('path', 'in', platform_image_cached) }}"

    - name: Debug cached images
      ansible.builtin.debug:
        msg: "{{ platform_image_cached }}"

    - name: Debug uncached images
      ansible.builtin.debug:
        msg: "{{ platform_image_uncached }}"

    - name: Cache platform images
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ item.path }}"
        owner: root
        group: root
        mode: 0600
      loop_control:
        label: "{{ item.url }} -> {{ item.path }}"
      loop: "{{ platform_image_uncached }}"

- name: Create KVM guests
  hosts: "{{ libvirt_guests | default('all') }}"
  gather_facts: false
  become: true
  tasks:
    - name: Create guest SSH key
      become: false
      run_once: true
      delegate_to: localhost
      block:
        - name: Create guest dir
          ansible.builtin.file:
            path: "{{ _libvirt_guestdir }}"
            state: directory
            mode: 0755

        - name: Create SSH key
          community.crypto.openssh_keypair:
            path: "{{ _libvirt_guestdir }}/id_rsa"
          run_once: true
          register: _pubkey

        - name: Register controller privkey facts
          ansible.builtin.set_fact:
            guest_privkey: "{{ _pubkey.filename }}"
          delegate_facts: true

    - name: Set platform facts
      ansible.builtin.set_fact:
        guest_image: "{{ _platform.image | default('') }}"
        guest_dhcp: "{{ _platform.dhcp | default(False) | bool }}"
        guest_disk_path: "{{ _libvirt_path }}/{{ _platform.name }}.img"
        guest_disk_size: "{{ _platform.size | default('20G') }}"
        guest_gateway: "{{ _libvirt_address | ansible.utils.ipaddr('address') }}"
        guest_user: "{{ _libvirt_user }}"
        guest_pass: "{{ _libvirt_pass | ansible.builtin.password_hash('sha512') }}"
        guest_pubkey: "{{ _pubkey.public_key }}"
        guest_privkey: "{{ _pubkey.filename }}"
        guest_hostname: "{{ inventory_hostname }}"
        guest_disk_format: qcow2
        guest_iso_path: "{{ _libvirt_path }}/{{ inventory_hostname }}.iso"
        guest_network: "{{ _libvirt_network }}"
        guest_mem: "{{ (_platform.mem | default(2)) * 1024 }}"
        guest_cpu: "{{ _platform.cpu | default(2) }}"
        guest_ipaddr: "{{ _platform.ipaddr }}/{{ _libvirt_prefix }}"
        guest_macaddr: "{{ _platform.macaddr }}"
        guest_resolvers: "{{ _platform.dns | default(_libvirt_resolvers) }}"
      vars:
        _platform: "{{ _libvirt_platforms | selectattr('name', 'equalto', inventory_hostname) | first }}"

    - name: Create KVM guest
      delegate_to: localhost
      block:
        - name: Query active KVM guests
          ansible.builtin.command: virsh list --name
          run_once: true
          register: _libvirt_guest_query
          changed_when: false

        - name: Set guest facts
          ansible.builtin.set_fact:
            _libvirt_guest_list: "{{ _libvirt_guest_query.stdout_lines | map('trim') | list }}"

        - name: Manage KVM guests
          when: inventory_hostname not in _libvirt_guest_list
          block:
            - name: Create KVM guest disks
              when: guest_image != ''
              block:
                - name: Create KVM guest disks
                  ansible.builtin.copy:
                    src: "{{ _libvirt_path }}/{{ guest_image | urlsplit('path') | basename }}"
                    dest: "{{ guest_disk_path }}"
                    remote_src: true
                    mode: "u=rw,g=r,o="

                - name: Resize KVM guest disks
                  ansible.builtin.command:
                    cmd: qemu-img resize {{ guest_disk_path }} {{ guest_disk_size }}

            - name: Create KVM pxe disks
              ansible.builtin.command:
                cmd: "qemu-img create -f qcow2 {{ guest_disk_path }} {{ guest_disk_size }}"
              when: guest_image == ''

            - name: Manage KVM disk permissions
              ansible.builtin.file:
                dest: "{{ guest_disk_path }}"
                state: file
                owner: "{{ (_host_os_family == 'Debian') | ternary('libvirt-qemu', 'qemu') }}"
                group: kvm
                mode: 0666
              vars:
                _host_os_family: "{{ hostvars['localhost']['ansible_os_family'] }}"

            - name: Create cloud-init tempdir
              ansible.builtin.tempfile:
                state: directory
                prefix: libvirt
              register: libvirt_tmpdir

            - name: Create KVM guest
              block:
                - name: Create cloud-init meta data
                  ansible.builtin.template:
                    src: "meta-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/meta-data"
                    mode: "u=rw,g=r,o="

                - name: Create cloud-init user data
                  ansible.builtin.template:
                    src: "user-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/user-data"
                    mode: "u=rw,g=r,o="

                - name: Create cloud-init network data
                  ansible.builtin.template:
                    src: "network-config.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/network-config"
                    mode: "u=rw,g=r,o="
                  when: not guest_dhcp

                - name: Create cloud-init iso
                  ansible.builtin.command:
                    cmd: |
                      xorriso -as mkisofs
                      -volid cidata -joliet -rock
                      -o {{ _libvirt_path }}/{{ inventory_hostname }}.iso .
                    chdir: "{{ libvirt_tmpdir.path }}"

                - name: Template KVM guest XML
                  ansible.builtin.template:
                    src: "vm.j2.xml"
                    dest: "{{ libvirt_tmpdir.path }}/vm.j2.xml"
                    mode: "u=rw,g=r,o="

                - name: Create KVM guest
                  ansible.builtin.command: "virsh create {{ libvirt_tmpdir.path }}/vm.j2.xml --validate"

              always:
                - name: Destroy cloud-init tempdir
                  ansible.builtin.file:
                    dest: "{{ libvirt_tmpdir.path }}"
                    state: absent

        - name: Start KVM guest
          ansible.builtin.command: "virsh start {{ inventory_hostname }}"
          ignore_errors: true

    - name: Override KVM guest configuration settings
      ansible.builtin.add_host:
        hostname: "{{ item.name }}"
        ansible_host: "{{ item.ipaddr | ansible.utils.ipaddr('address') }}"
        ansible_user: "{{ _libvirt_user }}"
        ansible_ssh_private_key_file: "{{ _pubkey.filename }}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ _libvirt_platforms }}"
      run_once: true

- name: Build Molecule instance config file
  hosts: localhost
  vars:
    ansible_connection: local
  tasks:
    - name: Set platform facts
      ansible.builtin.set_fact:
        _platform_molecule: "{{ _platform_instances | map('nephelaiio.plugins.alias_keys', _aliases) }}"
      vars:
        _instance:
          port: 22
          user: "{{ _libvirt_user }}"
          identity_file: "{{ guest_privkey }}"
        _aliases:
          name: instance
          ipaddr: address
        _platform_instances: "{{ [_instance] | product(_libvirt_platforms) | map('ansible.builtin.combine') }}"

    - name: Build molecule instance config
      when: molecule_instance_config is defined
      block:
        - name: Debug instance config
          ansible.builtin.debug:
            var: _platform_molecule

        - name: Dump instance config
          ansible.builtin.copy:
            content: "{{ _platform_molecule | ansible.builtin.to_nice_yaml(indent=2) }}"
            dest: "{{ molecule_instance_config }}"
            mode: 0640

        - name: Configure host file entries
          ansible.builtin.lineinfile:
            path: /etc/hosts
            regexp: ".*{{ item.instance }}.*"
            line: "{{ item.address }} {{ item.instance }}"
          loop_control:
            label: "{{ item.instance }}"
          loop: "{{ _platform_molecule }}"
          become: true

- name: Wait for KVM guest initialization
  hosts: "{{ libvirt_guests | default('all') }}"
  gather_facts: false
  tasks:
    - name: Wait for connection
      ansible.builtin.wait_for_connection:
        timeout: "{{ _libvirt_conn_timeout }}"
      when: _libvirt_image != ''
