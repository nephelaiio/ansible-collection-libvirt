---
- name: Prepare guest nodes
  ansible.builtin.import_playbook: nephelaiio.libvirt.prepare


- name: Configure guests
  hosts: "{{ _libvirt_hosts }}"
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Verify required parameters
      ansible.builtin.assert:
        that: _libvirt_platforms is defined

    - name: Debug vardefs
      ansible.builtin.debug:
        msg: "{{ _varnames | zip(_varvalues) | map('join', '=') | reject('match', '^_libvirt_network_.*$') }}"
      vars:
        _varnames: "{{ lookup('ansible.builtin.varnames', '^_libvirt_.*$', wantlist=True)  }}"
        _varvalues: "{{ lookup('ansible.builtin.vars', *_varnames) }}"

    - name: Query libvirt pools
      community.libvirt.virt_pool:
        command: list_pools
      register: _pools

    - name: Create libvirt path
      ansible.builtin.file:
        path: "{{ _libvirt_path }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      become: true

    - name: Define libvirt pool
      community.libvirt.virt_pool:
        command: define
        name: "{{ _libvirt_pool }}"
        xml: "{{ lookup('ansible.builtin.template', 'pool.j2.xml') }}"
      vars:
        _pool: "{{ _libvirt_pool }}"
        _path: "{{ _libvirt_path }}"

    - name: Activate libvirt pool
      community.libvirt.virt_pool:
        state: active
        name: "{{ _libvirt_pool }}"

    - name: Add libvirt network
      community.libvirt.virt_net:
        command: define
        name: "{{ _net_name }}"
        xml: "{{ lookup('ansible.builtin.template', 'network.j2.xml') }}"
      vars:
        _net_name: "{{ _libvirt_network }}"
        _net_address: "{{ _libvirt_address | ansible.utils.ipaddr('address') }}"
        _net_mask: "{{ _libvirt_address | ansible.utils.ipaddr('netmask') }}"
      when: _libvirt_network != "default"

    - name: Start libvirt network
      community.libvirt.virt_net:
        command: create
        name: "{{ _libvirt_network }}"
      when: _libvirt_network != "default"

    - name: List cached images
      ansible.builtin.find:
        paths: "{{ _libvirt_path }}"
        recurse: false
      register: _cache_query

    - name: Cache platform images
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ item.path }}"
        owner: root
        group: root
        mode: 0600
      vars:
        _platform_image_cached: "{{ _cache_query.files | map(attribute='path') }}"
        _platform_image_urls: "{{ _libvirt_platforms | map(attribute='image') | unique }}"
        _platform_image_basenames: "{{ _platform_image_urls | map('urlsplit', 'path') | map('basename') }}"
        _platform_image_paths: "{{ [_libvirt_path] | zip(_platform_image_basenames) | map('join', '/') }}"
        _platform_image_tuples: "{{ (['url'] | zip(_platform_image_urls)) | zip(['path'] | zip(_platform_image_paths)) }}"
        _platform_image_data: "{{ _platform_image_tuples | map('community.general.dict') }}"
        _platform_image_uncached: "{{ _platform_image_data | rejectattr('path', 'in', _platform_image_cached) }}"
      loop_control:
        label: "{{ item.url }} -> {{ item.path }}"
      loop: "{{ _platform_image_uncached }}"


- name: Create KVM guests
  hosts: "{{ _libvirt_guests }}"
  gather_facts: false
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Create KVM guest
      delegate_to: localhost
      block:
        - name: Create guest SSH key
          become: false
          block:
            - name: Create guest dir
              ansible.builtin.file:
                path: "{{ _libvirt_guestdir }}"
                state: directory
                mode: 0755

            - name: Create SSH key
              community.crypto.openssh_keypair:
                path: "{{ _libvirt_guestdir }}/id_rsa"
              run_once: true
              register: _pubkey

        - name: Record pubkey
          ansible.builtin.set_fact:
            _envkey: "{{ _pubkey }}"
          delegate_to: localhost
          delegate_facts: true

        - name: Query active KVM guests
          ansible.builtin.command: virsh list --name
          run_once: true
          register: guest_query
          changed_when: false

        - name: Manage KVM guests
          when: inventory_hostname not in guest_query.stdout_lines
          block:
            - name: Filter platform facts
              ansible.builtin.set_fact:
                guest_image: "{{ _platform.image }}"
                guest_dhcp: "{{ _platform.dhcp | default(False) | bool }}"
                guest_disk_path: "{{ _libvirt_path }}/{{ _platform.name }}.img"
                guest_disk_size: "{{ _platform.size | default('20G') }}"
                guest_gateway: "{{ _libvirt_address | ansible.utils.ipaddr('address') }}"
                guest_user: "{{ _libvirt_user }}"
                guest_pass: "{{ _libvirt_pass | ansible.builtin.password_hash('sha512') }}"
                guest_key: "{{ _pubkey.public_key }}"
                guest_hostname: "{{ inventory_hostname }}"
                guest_disk_format: qcow2
                guest_iso_path: "{{ _libvirt_path }}/{{ inventory_hostname }}.iso"
                guest_network: "{{ _libvirt_network }}"
                guest_mem: "{{ (_platform.mem | default(2)) * 1024 }}"
                guest_cpu: "{{ _platform.cpu | default(2) }}"
                guest_ipaddr: "{{ _platform.ipaddr }}/{{ _libvirt_prefix }}"
                guest_macaddr: "{{ _platform.macaddr }}"
              vars:
                _platform: "{{ _libvirt_platforms | selectattr('name', 'equalto', inventory_hostname) | first }}"

            - name: Create KVM guest disks
              ansible.builtin.copy:
                remote_src: true
                src: "{{ _libvirt_path }}/{{ guest_image | urlsplit('path') | basename }}"
                dest: "{{ guest_disk_path }}"
                owner: libvirt-qemu
                group: kvm
                mode: 0666
                force: true

            - name: Resize KVM guest disks
              ansible.builtin.command:
                cmd: qemu-img resize {{ guest_disk_path }} {{ guest_size | default('20G') }}

            - name: Create cloud-init tempdir
              ansible.builtin.tempfile:
                state: directory
                prefix: libvirt
              register: libvirt_tmpdir
              run_once: true

            - name: Create KVM guest
              block:
                - name: Create instance tempdir
                  ansible.builtin.file:
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}"
                    state: directory

                - name: Create cloud-init meta data
                  ansible.builtin.template:
                    src: "meta-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}/meta-data"

                - name: Debug password hash
                  ansible.builtin.debug:
                    msg: "{{ _libvirt_pass | ansible.builtin.password_hash('sha512') }}"

                - name: Create cloud-init user data
                  ansible.builtin.template:
                    src: "user-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}/user-data"

                - name: Create cloud-init network data
                  ansible.builtin.template:
                    src: "network-config.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}/network-config"
                  when: not guest_dhcp

                - name: Create cloud-init iso
                  ansible.builtin.command:
                    cmd: |
                      xorriso -as mkisofs
                      -volid cidata -joliet -rock
                      -o {{ _libvirt_path }}/{{ inventory_hostname }}.iso .
                    chdir: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}"

                - name: Create KVM guest
                  community.libvirt.virt:
                    xml: "{{ lookup('ansible.builtin.template', 'vm.j2.xml') }}"
                    command: define

              always:
                - name: Destroy cloud-init tempdir
                  ansible.builtin.file:
                    dest: "{{ libvirt_tmpdir.path }}"
                    state: absent
                  run_once: true

        - name: Start KVM guest
          community.libvirt.virt:
            name: "{{ inventory_hostname }}"
            state: running


- name: Build Molecule instance config file
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Set platform facts
      ansible.builtin.set_fact:
        _platform_molecule: "{{ _platform_instances | map(_libvirt_filter_alias, _aliases) }}"
      vars:
        _instance:
          port: 22
          user: "{{ _libvirt_user }}"
          identity_file: "{{ _envkey.filename }}"
        _aliases:
          name: instance
          ipaddr: address
        _platform_instances: "{{ [_instance] | product(_libvirt_platforms) | map(_libvirt_filter_combine) }}"

    - name: Build molecule instance config
      when: molecule_instance_config is defined
      block:
        - name: Dump instance config
          ansible.builtin.copy:
            content: "{{ _platform_molecule | ansible.builtin.to_nice_yaml(indent=2) }}"
            dest: "{{ molecule_instance_config }}"
            mode: 0640

        - name: Configure host file entries
          ansible.builtin.lineinfile:
            path: /etc/hosts
            regexp: ".*{{ item.instance }}.*"
            line: "{{ item.address }} {{ item.instance }}"
          loop_control:
            label: "{{ item.instance }}"
          loop: "{{ _platform_molecule }}"
          become: true


- name: Wait for guest initialization
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Wait for connection
      ansible.builtin.wait_for_connection:
        timeout: 30
